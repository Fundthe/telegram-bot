import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters, CallbackQueryHandler
)
from flask import Flask
from threading import Thread

# --- Keep Alive ---
app_web = Flask('')

@app_web.route('/')
def home():
    return "I'm alive!"

def run():
    app_web.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# --- Telegram bot ---
load_dotenv()

CHOOSING, RATE, HOURS, LOOP_TOKENS, LOOP_LTV, LOOP_SUPPLY, LOOP_BORROW, \
LOAN_DEP_AMOUNT, LOAN_DEP_PRICE, LOAN_BORROW_AMOUNT, LOAN_BORROW_PRICE, \
LOAN_LTV, LOAN_BORROW_FACTOR, IL_INPUT = range(14)

user_data_temp = {}

def back_to_menu_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –Ω–∞—á–∞–ª–æ", callback_data="back")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìà –°—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="rate"),
         InlineKeyboardButton("üîÅ –õ—É–ø–∏–Ω–≥", callback_data="looping")],
        [InlineKeyboardButton("üí≥ –ö—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ", callback_data="loan"),
         InlineKeyboardButton("üìâ IL", callback_data="il")]
    ])
    if update.message:
        await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\nüîΩ –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\nüîΩ –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)
    return CHOOSING

async def choose_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        return await start(update, context)

    choice = query.data

    if choice == "rate":
        await query.edit_message_text("üí¨ –í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5):", reply_markup=back_to_menu_button())
        return RATE
    elif choice == "looping":
        await query.edit_message_text("üî¢ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:", reply_markup=back_to_menu_button())
        return LOOP_TOKENS
    elif choice == "loan":
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–ø–æ–∑–∏—Ç–µ:", reply_markup=back_to_menu_button())
        return LOAN_DEP_AMOUNT
    elif choice == "il":
        await query.edit_message_text("üî† –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã:", reply_markup=back_to_menu_button())
        user_data_temp[query.message.chat_id] = {}
        return IL_INPUT
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return CHOOSING

async def get_il_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip().replace(',', '.')
    user_state = user_data_temp.setdefault(chat_id, {})

    try:
        if 'token1' not in user_state:
            user_state['token1'] = text.upper()
            await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É {user_state['token1']} –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—É–ª:")
            return IL_INPUT

        elif 'p1_initial' not in user_state:
            user_state['p1_initial'] = float(text)
            await update.message.reply_text(f"üìâ –í–≤–µ–¥–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É {user_state['token1']}:")
            return IL_INPUT

        elif 'p1_now' not in user_state:
            user_state['p1_now'] = float(text)
            await update.message.reply_text("üî† –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã:")
            return IL_INPUT

        elif 'token2' not in user_state:
            user_state['token2'] = text.upper()
            await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É {user_state['token2']} –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—É–ª:")
            return IL_INPUT

        elif 'p2_initial' not in user_state:
            user_state['p2_initial'] = float(text)
            await update.message.reply_text(f"üìâ –í–≤–µ–¥–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É {user_state['token2']}:")
            return IL_INPUT

        elif 'p2_now' not in user_state:
            user_state['p2_now'] = float(text)

            p1_initial = user_state['p1_initial']
            p1_now = user_state['p1_now']
            p2_initial = user_state['p2_initial']
            p2_now = user_state['p2_now']

            r1 = p1_now / p1_initial
            r2 = p2_now / p2_initial
            k = r1 / r2
            il = (2 * (k ** 0.5) / (1 + k)) - 1

            response = (
                "üìâ Impermanent Loss\n"
                "```\n"
                f"{user_state['token1']}: {p1_initial} ‚Üí {p1_now}\n"
                f"{user_state['token2']}: {p2_initial} ‚Üí {p2_now}\n"
                f"IL: {abs(il) * 100:.2f}%\n"
                "```"
            )

            await update.message.reply_text(response)
            return await start(update, context)

        else:
            user_data_temp[chat_id] = {}
            await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã:")
            return IL_INPUT

    except Exception:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.")
        return IL_INPUT

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rate = float(update.message.text.strip().replace('%', ''))
        user_data_temp[update.effective_chat.id] = {'rate': rate}
        await update.message.reply_text("‚è± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4)")
        return HOURS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5")
        return RATE

async def get_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        hours = float(update.message.text.strip().replace('—á', '').replace(' ', ''))
        rate = user_data_temp[update.effective_chat.id]['rate']
        simple = calculate_simple(rate, hours)
        response = (
            f"‚úÖ –†–∞—Å—á—ë—Ç –≥–æ—Ç–æ–≤! \n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {rate}% \n"
            f"‚è± –ù–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ: {hours} —á \n"
            f"üìÖ –ü—Ä–æ—Å—Ç–æ–π % –≤ –≥–æ–¥: {simple:.2f}% \n"
            f"‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        await update.message.reply_text(response)
        return await start(update, context)
    except Exception:
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return RATE

async def get_loop_tokens(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tokens = float(update.message.text.strip())
        user_data_temp[update.effective_chat.id] = {'tokens': tokens}
        await update.message.reply_text("üìä –í–≤–µ–¥–∏ LTV (–≤ %):")
        return LOOP_LTV
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 10")
        return LOOP_TOKENS

async def get_loop_ltv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        ltv = float(update.message.text.strip().replace('%', '')) / 100
        user_data_temp[update.effective_chat.id]['ltv'] = ltv
        await update.message.reply_text("üìà –í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É (–≤ %):")
        return LOOP_SUPPLY
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 70")
        return LOOP_LTV

async def get_loop_supply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        supply = float(update.message.text.strip().replace('%', ''))
        user_data_temp[update.effective_chat.id]['supply'] = supply
        await update.message.reply_text("üí∏ –í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –∑–∞–π–º—É (–≤ %):")
        return LOOP_BORROW
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 15")
        return LOOP_SUPPLY

async def get_loop_borrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        borrow = float(update.message.text.strip().replace('%', ''))
        data = user_data_temp[update.effective_chat.id]

        rounds = calculate_looping_table(
            tokens=data['tokens'],
            ltv=data['ltv'],
            supply_rate=data['supply'],
            borrow_rate=borrow
        )

        response = "‚úÖ –†–∞—Å—á—ë—Ç –ø–æ –ª—É–ø–∏–Ω–≥—É (10 –∫—Ä—É–≥–æ–≤):\n\n"
        response += "```\n"   
        response = "–ö—Ä—É–≥ |   –î–µ–ø–æ–∑–∏—Ç  |   –ó–∞—ë–º   |   –î–æ–ª–≥   |   APY"
        response += "-----|------------|----------|----------|--------\n"

        for r in rounds:
            response += f"{r['round']:>4} | {r['deposit']:>10.2f} | {r['borrow']:>8.2f} | {r['total_borrow']:>8.2f} | {r['apy']:>6.2f}%\n"

        response += "```\n"
        response += "\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        await update.message.reply_text(response)
        return await start(update, context)

    except Exception:
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return LOOP_BORROW

async def get_loan_dep_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.strip())
        user_data_temp[update.effective_chat.id] = {'dep_amount': amount}
        await update.message.reply_text("üíµ –í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:")
        return LOAN_DEP_PRICE
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return LOAN_DEP_AMOUNT

async def get_loan_dep_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text.strip())
        user_data_temp[update.effective_chat.id]['dep_price'] = price
        await update.message.reply_text("üí∏ –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–π–º–µ:")
        return LOAN_BORROW_AMOUNT
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return LOAN_DEP_PRICE

async def get_loan_borrow_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.strip())
        user_data_temp[update.effective_chat.id]['borrow_amount'] = amount
        await update.message.reply_text("üí≤ –í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∑–∞–π–º–∞:")
        return LOAN_BORROW_PRICE
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return LOAN_BORROW_AMOUNT

async def get_loan_borrow_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text.strip())
        user_data_temp[update.effective_chat.id]['borrow_price'] = price
        await update.message.reply_text("üìä –í–≤–µ–¥–∏ LTV (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.8):")
        return LOAN_LTV
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return LOAN_BORROW_PRICE

async def get_loan_ltv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        ltv_input = float(update.message.text.strip().replace('%', ''))
        if ltv_input > 1:
            ltv_input /= 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 70% -> 0.7
        user_data_temp[update.effective_chat.id]['ltv'] = ltv_input
        await update.message.reply_text("üßÆ –í–≤–µ–¥–∏ borrow factor (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1):")
        return LOAN_BORROW_FACTOR
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return LOAN_LTV

async def get_loan_borrow_factor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        factor = float(update.message.text.strip())
        data = user_data_temp[update.effective_chat.id]
        dep_value = data['dep_amount'] * data['dep_price']
        borrow_value = data['borrow_amount'] * data['borrow_price']

        hf = (data['ltv'] * dep_value) / (borrow_value * factor)
        rf = 1 / hf if hf != 0 else 0
        liquidation_price_dep = data['dep_price'] / hf if hf != 0 else 0
        liquidation_price_borrow = data['borrow_price'] / hf if hf != 0 else 0

        response = (
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞: \n"
            f"üü¢ Health Factor: {hf:.2f} \n"
            f"‚ö†Ô∏è Risk Factor: {rf:.1%} \n"
            f"üí£ –õ–∏–∫–≤. —Ü–µ–Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: ${liquidation_price_dep:.4f} \n"
            f"üí£ –õ–∏–∫–≤. —Ü–µ–Ω–∞ –∑–∞–π–º–∞: ${liquidation_price_borrow:.4f} \n"
            f"‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )

        await update.message.reply_text(response)
        return await start(update, context)
    except:
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        return LOAN_BORROW_FACTOR

async def get_il_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip().replace(',', '.')
    user_state = user_data_temp.setdefault(chat_id, {})

    try:
        # –®–∞–≥ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã
        if 'token1' not in user_state:
            user_state['token1'] = text.upper()
            await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É {user_state['token1']} –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—É–ª:")
            return IL_INPUT

        # –®–∞–≥ 2: —Ü–µ–Ω–∞ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
        elif 'p1_initial' not in user_state:
            user_state['p1_initial'] = float(text)
            await update.message.reply_text(f"üìâ –í–≤–µ–¥–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É {user_state['token1']}:")
            return IL_INPUT

        # –®–∞–≥ 3: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã
        elif 'p1_now' not in user_state:
            user_state['p1_now'] = float(text)
            await update.message.reply_text("üî† –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã:")
            return IL_INPUT

        # –®–∞–≥ 4: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã
        elif 'token2' not in user_state:
            user_state['token2'] = text.upper()
            await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏ —Ü–µ–Ω—É {user_state['token2']} –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—É–ª:")
            return IL_INPUT

        # –®–∞–≥ 5: —Ü–µ–Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
        elif 'p2_initial' not in user_state:
            user_state['p2_initial'] = float(text)
            await update.message.reply_text(f"üìâ –í–≤–µ–¥–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É {user_state['token2']}:")
            return IL_INPUT

        # –®–∞–≥ 6: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–µ—Ç—ã
        elif 'p2_now' not in user_state:
            user_state['p2_now'] = float(text)

            # –†–∞—Å—á—ë—Ç
            p1_initial = user_state['p1_initial']
            p1_now = user_state['p1_now']
            p2_initial = user_state['p2_initial']
            p2_now = user_state['p2_now']

            r1 = p1_now / p1_initial
            r2 = p2_now / p2_initial
            k = r1 / r2
            il = (2 * (k ** 0.5) / (1 + k)) - 1

            response = (
                "üìâ *Impermanent Loss*\n"
                "```\n"
                f"{'–ú–æ–Ω–µ—Ç–∞':<10}‚îÇ{'–í—Ö–æ–¥':>10}‚îÇ{'–í—ã—Ö–æ–¥':>10}\n"
                f"{'-'*10}‚îÇ{'-'*10}‚îÇ{'-'*10}\n"
                f"{user_state['token1']:<10}‚îÇ{p1_initial:>10.2f}‚îÇ{p1_now:>10.2f}\n"
                f"{user_state['token2']:<10}‚îÇ{p2_initial:>10.2f}‚îÇ{p2_now:>10.2f}\n"
                f"{'-'*33}\n"
                f"{'Impermanent Loss':<10} ‚Üí ‚Üí ‚Üí{abs(il) * 100:>10.2f}%\n"
                "```"
            )
            await update.message.reply_markdown_v2(response)
            user_data_temp[chat_id] = {}
            return await start(update, context)
            
            await update.message.reply_text(response)
            return await start(update, context)

        else:
            user_data_temp[chat_id] = {}
            await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã:")
            return IL_INPUT

    except Exception:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.")
        return IL_INPUT

from telegram.ext import CallbackQueryHandler

# --- –•–µ–Ω–¥–ª–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(choose_option)],
        states={
            CHOOSING: [CallbackQueryHandler(choose_option)],
            RATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_rate),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            HOURS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_hours),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOOP_TOKENS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loop_tokens),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOOP_LTV: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loop_ltv),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOOP_SUPPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loop_supply),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOOP_BORROW: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loop_borrow),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_DEP_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_dep_amount),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_DEP_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_dep_price),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_BORROW_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_borrow_amount),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_BORROW_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_borrow_price),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_LTV: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_ltv),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            LOAN_BORROW_FACTOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_loan_borrow_factor),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
            IL_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_il_input),
                CallbackQueryHandler(choose_option, pattern="^back$")
            ],
        },
        fallbacks=[]
    )

    # --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
        keep_alive()
        app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

        app.add_handler(conv_handler)
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

        app.run_polling()
