
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

load_dotenv()

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
RATE, HOURS = range(2)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
user_data_temp = {}

def calculate_simple(rate, hours, days=365):
    periods_per_day = 24 / hours
    return rate * periods_per_day * days

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí¨ –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)")
    return RATE

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rate = float(update.message.text.replace(',', '.'))
        user_data_temp[update.effective_chat.id] = {'rate': rate}
        await update.message.reply_text("üïí –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, –∫–∞–∫ —á–∞—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å—Ç–∞–≤–∫–∞ (–≤ —á–∞—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4)")
        return HOURS
    except:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5")
        return RATE

async def get_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        hours = int(update.message.text)
        chat_id = update.effective_chat.id
        rate = user_data_temp.get(chat_id, {}).get('rate')

        if rate is None:
            await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

        simple = calculate_simple(rate, hours)
        response = (
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {rate}%\n"
            f"‚è± –ü–µ—Ä–∏–æ–¥: –∫–∞–∂–¥—ã–µ {hours} —á\n"
            f"üßÆ –ü—Ä–æ—Å—Ç–æ–π % –≤ –≥–æ–¥: {simple:.2f}%"
        )
        await update.message.reply_text(response)
        return ConversationHandler.END
    except:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4")
        return HOURS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.TEXT & ~filters.COMMAND, start)
    ],
,
    states={
        RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rate)],
        HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hours)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)
app.run_polling()
