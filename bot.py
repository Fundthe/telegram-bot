
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

load_dotenv()

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
RATE, HOURS = range(2)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
user_data_temp = {}

def calculate_simple(rate, hours, days=365):
    periods_per_day = 24 / hours
    return rate * periods_per_day * days

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≥–æ–¥–æ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —Å—Ç–∞–≤–∫–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)"
    )
    return RATE

async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rate = float(update.message.text.strip().replace('%', ''))
        user_data_temp[update.effective_chat.id] = {'rate': rate}
        await update.message.reply_text("‚è± –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4)")
        return HOURS
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 0.5")
        return RATE

async def get_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        hours = float(update.message.text.strip().replace('—á', '').replace(' ', ''))
        rate = user_data_temp[update.effective_chat.id]['rate']
        simple = calculate_simple(rate, hours)
        response = (
            f"‚úÖ –†–∞—Å—á—ë—Ç –≥–æ—Ç–æ–≤!\n\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {rate}%\n"
            f"‚è± –ù–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ: {hours} —á\n"
            f"üìÖ –ü—Ä–æ—Å—Ç–æ–π % –≤ –≥–æ–¥: {simple:.2f}%\n\n"
            f"üîÅ –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        await update.message.reply_text(response)
        await update.message.reply_text("üí¨ –ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)")
        return RATE
    except Exception:
        await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return RATE

if __name__ == "__main__":
    app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, start)
        ],
        states={
            RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rate)],
            HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hours)]
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
